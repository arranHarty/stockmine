// ============================================================================
//
// Copyright (c) 2006-2013, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package stockmine.yahoo_finance_http_request_0_1;

import routines.Mathematical;
import routines.DataOperation;
import routines.Relational;
import routines.TalendDate;
import routines.TalendDataGenerator;
import routines.Numeric;
import routines.TalendString;
import routines.StringHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: yahoo_finance_http_request Purpose: Pull stock data<br>
 * Description:  <br>
 * @author test@talend.com
 * @version 5.4.0.r110020
 * @status DEV
 */
public class yahoo_finance_http_request implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "yahoo_finance_http_request";
	private final String projectName = "STOCKMINE";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	public boolean isExportedAsOSGI = false;

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private java.lang.Exception exception = null;

	public java.lang.Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends java.lang.Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private java.lang.Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(java.lang.Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public java.lang.Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							e.getMessage());
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						e.getMessage());
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					yahoo_finance_http_request.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(yahoo_finance_http_request.this,
									new Object[] { e, currentComponent,
											globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputDelimited_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_1", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFlowToIterate_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFlowToIterate_5", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tHttpRequest_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tHttpRequest_1", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMongoDBOutput_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMongoDBOutput_2", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_1_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_STOCKMINE_yahoo_finance_http_request = new byte[0];
		static byte[] commonByteArray_STOCKMINE_yahoo_finance_http_request = new byte[0];

		public String ResponseContent;

		public String getResponseContent() {
			return this.ResponseContent;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_STOCKMINE_yahoo_finance_http_request.length) {
					if (length < 1024
							&& commonByteArray_STOCKMINE_yahoo_finance_http_request.length == 0) {
						commonByteArray_STOCKMINE_yahoo_finance_http_request = new byte[1024];
					} else {
						commonByteArray_STOCKMINE_yahoo_finance_http_request = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_STOCKMINE_yahoo_finance_http_request,
						0, length);
				strReturn = new String(
						commonByteArray_STOCKMINE_yahoo_finance_http_request,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_STOCKMINE_yahoo_finance_http_request) {

				try {

					int length = 0;

					this.ResponseContent = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ResponseContent, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ResponseContent=" + ResponseContent);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class mappingStruct implements
			routines.system.IPersistableRow<mappingStruct> {
		final static byte[] commonByteArrayLock_STOCKMINE_yahoo_finance_http_request = new byte[0];
		static byte[] commonByteArray_STOCKMINE_yahoo_finance_http_request = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int key;

		public int getKey() {
			return this.key;
		}

		public String stock_code;

		public String getStock_code() {
			return this.stock_code;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.key;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final mappingStruct other = (mappingStruct) obj;

			if (this.key != other.key)
				return false;

			return true;
		}

		public void copyDataTo(mappingStruct other) {

			other.key = this.key;
			other.stock_code = this.stock_code;

		}

		public void copyKeysDataTo(mappingStruct other) {

			other.key = this.key;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_STOCKMINE_yahoo_finance_http_request.length) {
					if (length < 1024
							&& commonByteArray_STOCKMINE_yahoo_finance_http_request.length == 0) {
						commonByteArray_STOCKMINE_yahoo_finance_http_request = new byte[1024];
					} else {
						commonByteArray_STOCKMINE_yahoo_finance_http_request = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_STOCKMINE_yahoo_finance_http_request,
						0, length);
				strReturn = new String(
						commonByteArray_STOCKMINE_yahoo_finance_http_request,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_STOCKMINE_yahoo_finance_http_request) {

				try {

					int length = 0;

					this.key = dis.readInt();

					this.stock_code = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.key);

				// String

				writeString(this.stock_code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("key=" + String.valueOf(key));
			sb.append(",stock_code=" + stock_code);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(mappingStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.key, other.key);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_STOCKMINE_yahoo_finance_http_request = new byte[0];
		static byte[] commonByteArray_STOCKMINE_yahoo_finance_http_request = new byte[0];

		public int key;

		public int getKey() {
			return this.key;
		}

		public String stock_code;

		public String getStock_code() {
			return this.stock_code;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_STOCKMINE_yahoo_finance_http_request.length) {
					if (length < 1024
							&& commonByteArray_STOCKMINE_yahoo_finance_http_request.length == 0) {
						commonByteArray_STOCKMINE_yahoo_finance_http_request = new byte[1024];
					} else {
						commonByteArray_STOCKMINE_yahoo_finance_http_request = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_STOCKMINE_yahoo_finance_http_request,
						0, length);
				strReturn = new String(
						commonByteArray_STOCKMINE_yahoo_finance_http_request,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_STOCKMINE_yahoo_finance_http_request) {

				try {

					int length = 0;

					this.key = dis.readInt();

					this.stock_code = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.key);

				// String

				writeString(this.stock_code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("key=" + String.valueOf(key));
			sb.append(",stock_code=" + stock_code);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;

	String iterateId = "";
	int iterateLoop = 0;
	String currentComponent = "";
				
	try {
	
			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;

					

		row2Struct row2 = new row2Struct();
mappingStruct mapping = new mappingStruct();
row1Struct row1 = new row1Struct();





/**
 * [tFlowToIterate_5 begin ] start
 */
			
			int NB_ITERATE_tHttpRequest_1 = 0; //for statistics

ok_Hash.put("tFlowToIterate_5", false);
start_Hash.put("tFlowToIterate_5", System.currentTimeMillis());
currentComponent="tFlowToIterate_5";


if (execStat) {
    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap_mapping = (java.util.concurrent.ConcurrentHashMap) globalMap.get("concurrentHashMap");
	concurrentHashMap_mapping.putIfAbsent("mapping" + iterateLoop,new java.util.concurrent.atomic.AtomicInteger(0));
	java.util.concurrent.atomic.AtomicInteger stats_mapping = (java.util.concurrent.atomic.AtomicInteger) concurrentHashMap_mapping.get("mapping" + iterateLoop);
	runStat.updateStatOnConnection("mapping" + iterateId, stats_mapping.incrementAndGet()<=1?0:1, 0);
} 


	int tos_count_tFlowToIterate_5 = 0;

int nb_line_tFlowToIterate_5 = 0;
int counter_tFlowToIterate_5 = 0;

 



/**
 * [tFlowToIterate_5 begin ] stop
 */



/**
 * [tMap_1 begin ] start
 */


ok_Hash.put("tMap_1", false);
start_Hash.put("tMap_1", System.currentTimeMillis());
currentComponent="tMap_1";


if (execStat) {
    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap_row2 = (java.util.concurrent.ConcurrentHashMap) globalMap.get("concurrentHashMap");
	concurrentHashMap_row2.putIfAbsent("row2" + iterateLoop,new java.util.concurrent.atomic.AtomicInteger(0));
	java.util.concurrent.atomic.AtomicInteger stats_row2 = (java.util.concurrent.atomic.AtomicInteger) concurrentHashMap_row2.get("row2" + iterateLoop);
	runStat.updateStatOnConnection("row2" + iterateId, stats_row2.incrementAndGet()<=1?0:1, 0);
} 


	int tos_count_tMap_1 = 0;






// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
mappingStruct mapping_tmp = new mappingStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



/**
 * [tFileInputDelimited_1 begin ] start
 */


ok_Hash.put("tFileInputDelimited_1", false);
start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());
currentComponent="tFileInputDelimited_1";


	int tos_count_tFileInputDelimited_1 = 0;
	
	
	
	
	
				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				try{
					
						Object filename_tFileInputDelimited_1 = "/Users/arranhartgroves/Dropbox/thinkBA_employees/arran_hartgroves/deliverables/code/github/stockmine/data/stocks.csv";
						if(filename_tFileInputDelimited_1 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
			if(footer_value_tFileInputDelimited_1 >0 || random_value_tFileInputDelimited_1 > 0){
				
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited("/Users/arranhartgroves/Dropbox/thinkBA_employees/arran_hartgroves/deliverables/code/github/stockmine/data/stocks.csv", "ISO-8859-15",",","\n",true,0,0,-1,-1, false);
						} catch(java.lang.Exception e) {
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_1!=null && fid_tFileInputDelimited_1.nextRecord()) {
						
			    						row2 = null;			
												
									boolean whetherReject_tFileInputDelimited_1 = false;
									row2 = new row2Struct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_1 = 0;
				
					String temp = ""; 
				
					columnIndexWithD_tFileInputDelimited_1 = 0;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								row2.key = ParserUtils.parseTo_int(temp);
							
						} else {						
							
								row2.key = 0;
							
						}
					
					
				
					columnIndexWithD_tFileInputDelimited_1 = 1;
					
							row2.stock_code = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
					
				
				
							
			    					} catch (java.lang.Exception e) {
			        					whetherReject_tFileInputDelimited_1 = true;
			        					
			                					System.err.println(e.getMessage());
			                					row2 = null;
			                				
			    					}
								

 



/**
 * [tFileInputDelimited_1 begin ] stop
 */
/**
 * [tFileInputDelimited_1 main ] start
 */


currentComponent="tFileInputDelimited_1";



 


	tos_count_tFileInputDelimited_1++;

/**
 * [tFileInputDelimited_1 main ] stop
 */
// Start of branch "row2"
if(row2 != null) { 



/**
 * [tMap_1 main ] start
 */


currentComponent="tMap_1";


//row2
//row2


if(execStat){
  runStat.updateStatOnConnection("row2"+iterateId,1, 1);
 } 



		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

mapping = null;


// # Output table : 'mapping'
mapping_tmp.key = row2.key ;
mapping_tmp.stock_code = row2.stock_code ;
mapping = mapping_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;











 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
// Start of branch "mapping"
if(mapping != null) { 



/**
 * [tFlowToIterate_5 main ] start
 */


currentComponent="tFlowToIterate_5";


//mapping
//mapping


if(execStat){
  runStat.updateStatOnConnection("mapping"+iterateId,1, 1);
 } 




    	            
            globalMap.put("mapping.key", mapping.key);
            nb_line_tFlowToIterate_5++;              
            globalMap.put("mapping.stock_code", mapping.stock_code);
            nb_line_tFlowToIterate_5++;  
 
       counter_tFlowToIterate_5++;
       globalMap.put("tFlowToIterate_5_CURRENT_ITERATION", counter_tFlowToIterate_5);
 


	tos_count_tFlowToIterate_5++;

/**
 * [tFlowToIterate_5 main ] stop
 */
	NB_ITERATE_tHttpRequest_1++;
	iterateLoop++;

if(execStat){				
           			runStat.updateStatOnConnection("row1", 3, 0);
}           			        		
if(execStat){
				runStat.updateStatOnConnection("iterate1", 1, "exec" + NB_ITERATE_tHttpRequest_1);
				//Thread.sleep(1000);
}				


/**
 * [tMongoDBOutput_2 begin ] start
 */


ok_Hash.put("tMongoDBOutput_2", false);
start_Hash.put("tMongoDBOutput_2", System.currentTimeMillis());
currentComponent="tMongoDBOutput_2";


if (execStat) {
    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap_row1 = (java.util.concurrent.ConcurrentHashMap) globalMap.get("concurrentHashMap");
	concurrentHashMap_row1.putIfAbsent("row1" + iterateLoop,new java.util.concurrent.atomic.AtomicInteger(0));
	java.util.concurrent.atomic.AtomicInteger stats_row1 = (java.util.concurrent.atomic.AtomicInteger) concurrentHashMap_row1.get("row1" + iterateLoop);
	runStat.updateStatOnConnection("row1" + iterateId, stats_row1.incrementAndGet()<=1?0:1, 0);
} 


	int tos_count_tMongoDBOutput_2 = 0;

			int nb_line_tMongoDBOutput_2 = 0;
			class DBObjectUtil_tMongoDBOutput_2 {
			
				private com.mongodb.BasicDBObject object = null;
				//Put value to embedded document
				//If have no embedded document, put the value to root document
				public void put(String parentNode, String curentName, Object value) {
					if (parentNode == null || "".equals(parentNode)) {
						object.put(curentName, value);
					} else {
						String objNames[]= parentNode.split("\\.");
						com.mongodb.BasicDBObject lastNode = getParentNode(parentNode, objNames.length-1);
						lastNode.put(curentName, value);
						com.mongodb.BasicDBObject parenttNode = null;
						for (int i = objNames.length - 1; i >=0; i--) {
							parenttNode=getParentNode(parentNode, i-1);
							parenttNode.put(objNames[i], lastNode);
							lastNode=(com.mongodb.BasicDBObject)parenttNode.clone();
						}
						object=lastNode;
					}
				}
				//Get node(embedded document) by path configuration
				public com.mongodb.BasicDBObject getParentNode(String parentNode, int index) {
					com.mongodb.BasicDBObject basicDBObject = object;
					if (parentNode == null || "".equals(parentNode)) {
						return object;
					} else {
						String objNames[] = parentNode.split("\\.");
						for (int i = 0; i <= index; i++) {
							basicDBObject = (com.mongodb.BasicDBObject) basicDBObject
									.get(objNames[i]);
							if (basicDBObject == null) {
								basicDBObject = new com.mongodb.BasicDBObject();
								return basicDBObject;
							}
							if (i == index) {
								break;
							}
						}
						return basicDBObject;
					}
				}
				
				public void putkeyNode(String parentNode, String curentName, Object value){
					if (parentNode == null || "".equals(parentNode) || ".".equals(parentNode)) {
						put(parentNode, curentName, value);
					}else{
						put("", parentNode+"."+curentName, value);
					}
				}
			
				public com.mongodb.BasicDBObject getObject() {
					return this.object;
				}
				
				public void setObject(com.mongodb.BasicDBObject object){
					this.object=object;
				}
			
			}
			DBObjectUtil_tMongoDBOutput_2 updateObjectUtil_tMongoDBOutput_2=new DBObjectUtil_tMongoDBOutput_2();
			DBObjectUtil_tMongoDBOutput_2 queryObjectUtil_tMongoDBOutput_2=new DBObjectUtil_tMongoDBOutput_2();
			java.util.Map<String, String> pathMap_tMongoDBOutput_2=new java.util.HashMap<String, String>();
			com.mongodb.Mongo mongo_tMongoDBOutput_2=null;
			com.mongodb.DB db_tMongoDBOutput_2 =null;
				pathMap_tMongoDBOutput_2.put("ResponseContent","");
			try{
				mongo_tMongoDBOutput_2 = new com.mongodb.Mongo(127.0.0.1, 27017);
				db_tMongoDBOutput_2 = mongo_tMongoDBOutput_2.getDB(stockmine);
				com.mongodb.DBCollection coll_tMongoDBOutput_2 = db_tMongoDBOutput_2.getCollection(yahoo_finance);
 



/**
 * [tMongoDBOutput_2 begin ] stop
 */



/**
 * [tHttpRequest_1 begin ] start
 */


ok_Hash.put("tHttpRequest_1", false);
start_Hash.put("tHttpRequest_1", System.currentTimeMillis());
currentComponent="tHttpRequest_1";


	int tos_count_tHttpRequest_1 = 0;

 



/**
 * [tHttpRequest_1 begin ] stop
 */
/**
 * [tHttpRequest_1 main ] start
 */


currentComponent="tHttpRequest_1";


java.net.URL url_tHttpRequest_1 = new java.net.URL("http://download.finance.yahoo.com/d/quotes.csv?s="+row2.stock_code+"&f=c8g3a0b2a5a2b0b3b6b4c1c0m7m5k4j5p2k2c6c3c4h0g0m0m2w1w4r1d0y0e0j4e7e9e8q0m3f6l2g4g1g5g6v1v7d1l1k1k3t1l0l3j1j3i0n0n4t8o0i5r5r0r2m8m6k5j6p0p6r6r7p1p5s6s1j2s7x0s0t7d2t6f0m4v0k0j0w0&e=.csv");

java.net.HttpURLConnection urlConn_tHttpRequest_1 = (java.net.HttpURLConnection) url_tHttpRequest_1.openConnection();
urlConn_tHttpRequest_1.setRequestMethod("GET");
urlConn_tHttpRequest_1.setDoOutput(true);
urlConn_tHttpRequest_1.setDoInput(true);
urlConn_tHttpRequest_1.setUseCaches(false);


urlConn_tHttpRequest_1.connect();

byte[] buffer_tHttpRequest_1 = new byte[1024];
int bos_buffer_tHttpRequest_1 = 0;StringBuilder sb_tHttpRequest_1=new StringBuilder(); 

if (java.net.HttpURLConnection.HTTP_OK == (urlConn_tHttpRequest_1.getResponseCode())) {
	java.io.InputStream bis_tHttpRequest_1 = new java.io.BufferedInputStream(urlConn_tHttpRequest_1.getInputStream());
		while ((bos_buffer_tHttpRequest_1 = bis_tHttpRequest_1.read(buffer_tHttpRequest_1)) != -1) {sb_tHttpRequest_1.append(new String(buffer_tHttpRequest_1,0,bos_buffer_tHttpRequest_1)); 
		}
		bis_tHttpRequest_1.close();
} else {
  System.err.println(urlConn_tHttpRequest_1.getResponseCode() + " " + urlConn_tHttpRequest_1.getResponseMessage());
}

        row1.ResponseContent = sb_tHttpRequest_1.toString();
urlConn_tHttpRequest_1.disconnect();

 


	tos_count_tHttpRequest_1++;

/**
 * [tHttpRequest_1 main ] stop
 */

/**
 * [tMongoDBOutput_2 main ] start
 */


currentComponent="tMongoDBOutput_2";


//row1
//row1


if(execStat){
  runStat.updateStatOnConnection("row1"+iterateId,1, 1);
 } 


				
				com.mongodb.WriteResult resultMessage_tMongoDBOutput_2=null;
				updateObjectUtil_tMongoDBOutput_2.setObject(new com.mongodb.BasicDBObject());
					
      				updateObjectUtil_tMongoDBOutput_2.put(pathMap_tMongoDBOutput_2.get("ResponseContent"),"ResponseContent", row1.ResponseContent);
				com.mongodb.BasicDBObject updateObj_tMongoDBOutput_2 = updateObjectUtil_tMongoDBOutput_2.getObject();
					resultMessage_tMongoDBOutput_2=coll_tMongoDBOutput_2.insert(updateObj_tMongoDBOutput_2);	
				if(resultMessage_tMongoDBOutput_2!=null && resultMessage_tMongoDBOutput_2.getError()!=null){
					System.err.println(resultMessage_tMongoDBOutput_2.getError());
				}
				nb_line_tMongoDBOutput_2 ++;

 


	tos_count_tMongoDBOutput_2++;

/**
 * [tMongoDBOutput_2 main ] stop
 */



/**
 * [tHttpRequest_1 end ] start
 */


currentComponent="tHttpRequest_1";



 

ok_Hash.put("tHttpRequest_1", true);
end_Hash.put("tHttpRequest_1", System.currentTimeMillis());




/**
 * [tHttpRequest_1 end ] stop
 */

/**
 * [tMongoDBOutput_2 end ] start
 */


currentComponent="tMongoDBOutput_2";


		}finally{
			if(mongo_tMongoDBOutput_2 != null )
			{
				mongo_tMongoDBOutput_2.close();
			}
		}
globalMap.put("tMongoDBOutput_2_NB_LINE", nb_line_tMongoDBOutput_2);if(execStat){
 runStat.updateStatOnConnection("row1"
 	+iterateId,2, 0); 
}
 

ok_Hash.put("tMongoDBOutput_2", true);
end_Hash.put("tMongoDBOutput_2", System.currentTimeMillis());




/**
 * [tMongoDBOutput_2 end ] stop
 */



if(execStat){
				runStat.updateStatOnConnection("iterate1", 2, "exec" + NB_ITERATE_tHttpRequest_1);
}				




} // End of branch "mapping"





} // End of branch "row2"




/**
 * [tFileInputDelimited_1 end ] start
 */


currentComponent="tFileInputDelimited_1";





            }
            }finally{
                if(!((Object)("/Users/arranhartgroves/Dropbox/thinkBA_employees/arran_hartgroves/deliverables/code/github/stockmine/data/stocks.csv") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_1!=null){
                		fid_tFileInputDelimited_1.close();
                	}
                }
                if(fid_tFileInputDelimited_1!=null){
                	globalMap.put("tFileInputDelimited_1_NB_LINE", fid_tFileInputDelimited_1.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_1", true);
end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());




/**
 * [tFileInputDelimited_1 end ] stop
 */

/**
 * [tMap_1 end ] start
 */


currentComponent="tMap_1";





// ###############################
// # Lookup hashes releasing
// ###############################         




if(execStat){
 runStat.updateStatOnConnection("row2"
 	+iterateId,2, 0); 
}
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

/**
 * [tFlowToIterate_5 end ] start
 */


currentComponent="tFlowToIterate_5";



globalMap.put("tFlowToIterate_5_NB_LINE",nb_line_tFlowToIterate_5);if(execStat){
 runStat.updateStatOnConnection("mapping"
 	+iterateId,2, 0); 
}
 

ok_Hash.put("tFlowToIterate_5", true);
end_Hash.put("tFlowToIterate_5", System.currentTimeMillis());




/**
 * [tFlowToIterate_5 end ] stop
 */









}//end the resume





	
	} catch(java.lang.Exception e) {	
		
		TalendException te = new TalendException(e, currentComponent, globalMap);
		
		
		throw te;
	
	} catch(java.lang.Error error) {
	
		runStat.stopThreadStat();
		throw error;

	}
	
	globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
}	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = null;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final yahoo_finance_http_request yahoo_finance_http_requestClass = new yahoo_finance_http_request();

		int exitCode = yahoo_finance_http_requestClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket
				// can't open
				System.err.println("The statistics socket port " + portStats
						+ " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = yahoo_finance_http_request.class
					.getClassLoader().getResourceAsStream(
							"stockmine/yahoo_finance_http_request_0_1/contexts/"
									+ contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "", resumeUtil.convertToJsonText(context));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileInputDelimited_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputDelimited_1) {

			e_tFileInputDelimited_1.printStackTrace();
			globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", -1);

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory)
							+ " bytes memory increase when running : yahoo_finance_http_request");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private final String[][] escapeChars = { { "\\n", "\n" }, { "\\'", "\'" },
			{ "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" },
			{ "\\\\", "\\" } };

	private String replaceEscapeChars(String keyValue) {
		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}
		for (String[] strArray : escapeChars) {
			keyValue = keyValue.replace(strArray[0], strArray[1]);
		}
		return keyValue;
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 47467 characters generated by Talend Open Studio for Big Data on the October
 * 30, 2013 10:36:22 PM GMT
 ************************************************************************************************/

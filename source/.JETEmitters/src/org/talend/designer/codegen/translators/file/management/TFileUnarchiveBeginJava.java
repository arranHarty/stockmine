package org.talend.designer.codegen.translators.file.management;

import org.talend.core.model.process.INode;
import org.talend.designer.codegen.config.CodeGeneratorArgument;
import org.talend.core.model.process.ElementParameterParser;

public class TFileUnarchiveBeginJava
{
  protected static String nl;
  public static synchronized TFileUnarchiveBeginJava create(String lineSeparator)
  {
    nl = lineSeparator;
    TFileUnarchiveBeginJava result = new TFileUnarchiveBeginJava();
    nl = null;
    return result;
  }

  public final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "      " + NL + "\t\tclass UnzippedFile_";
  protected final String TEXT_2 = " {" + NL + "\t\t\tpublic String fileName;" + NL + "\t\t\tpublic String filePath;" + NL + "\t\t\t" + NL + "\t\t\tpublic UnzippedFile_";
  protected final String TEXT_3 = "(String fileName, String filePath) {" + NL + "\t\t\t\tthis.fileName = fileName;" + NL + "\t\t\t\tthis.filePath = filePath;\t\t\t\t" + NL + "\t\t\t} " + NL + "\t\t\t" + NL + "\t\t}" + NL + "\t\tclass Util_";
  protected final String TEXT_4 = "{" + NL + "        \tpublic java.util.List<UnzippedFile_";
  protected final String TEXT_5 = "> unzippedFiles = new java.util.ArrayList<UnzippedFile_";
  protected final String TEXT_6 = ">();" + NL + "        \t" + NL + "            public void deleteDir(java.io.File dir) {" + NL + "                if (dir.isDirectory()) {" + NL + "                    String[] children = dir.list();" + NL + "                    for (int i = 0; i < children.length; i++) {" + NL + "                       deleteDir(new java.io.File(dir, children[i]));               " + NL + "                    }" + NL + "                }" + NL + "                dir.delete();" + NL + "            }" + NL + "" + NL + "            public void repairDir(java.io.File dir) {" + NL + "                java.io.File parentFile = dir.getParentFile();" + NL + "        " + NL + "                if (parentFile != null) {                            " + NL + "                    if (parentFile.exists() && parentFile.isFile())" + NL + "                        parentFile.delete();" + NL + "                       " + NL + "                        repairDir(parentFile);" + NL + "                }" + NL + "            }" + NL + "            public void checkDir(java.io.File file){" + NL + "                if (file.exists()) {" + NL + "                    if (file.isDirectory())" + NL + "                        deleteDir(file);" + NL + "                } else {" + NL + "                    repairDir(file);" + NL + "                }" + NL + "            }" + NL + "            public void output(String path, String fileName, java.io.InputStream is) throws java.lang.Exception{";
  protected final String TEXT_7 = "          " + NL + "                    java.io.File f = new java.io.File(path,fileName);";
  protected final String TEXT_8 = "            " + NL + "                    String tempName = fileName.replaceAll(\"\\\\\\\\\", \"/\");" + NL + "                    int m = tempName.lastIndexOf('/');        " + NL + "                    String shortName = tempName.substring(m!=-1? m+1 : 0);  " + NL + "      \t\t\t\tjava.io.File f = new java.io.File(path,shortName);  \t\t\t\t" + NL + "      \t\t\t\t";
  protected final String TEXT_9 = NL + "\t\t\t\tcheckDir(f);" + NL + "             " + NL + "                f.getParentFile().mkdirs();" + NL + "                f.createNewFile();                " + NL + "                java.io.FileOutputStream fos = new java.io.FileOutputStream(f);" + NL + "                " + NL + "                " + NL + "                byte[] buffer = new byte[1024];" + NL + "                " + NL + "                for (int len = is.read(buffer, 0, 1024); len != -1; len = is.read(buffer, 0, 1024)) {" + NL + "                    fos.write(buffer, 0, len);" + NL + "                }" + NL + "                fos.close();" + NL + "                unzippedFiles.add(new UnzippedFile_";
  protected final String TEXT_10 = "(f.getName(), f.getAbsolutePath()));" + NL + "            }" + NL + "            public void output(String path, String fileName, boolean isDirectory, java.io.InputStream is) throws java.lang.Exception {";
  protected final String TEXT_11 = "          " + NL + "                    java.io.File f = new java.io.File(path,fileName);";
  protected final String TEXT_12 = "            " + NL + "                    String tempName = fileName.replaceAll(\"\\\\\\\\\", \"/\");" + NL + "                    int m = tempName.lastIndexOf('/');        " + NL + "                    String shortName = tempName.substring(m!=-1 ? m+1 : 0);  " + NL + "                    java.io.File f = new java.io.File(path, shortName);                 ";
  protected final String TEXT_13 = NL + "                if(isDirectory) {" + NL + "                    if(!f.exists()) {" + NL + "                        f.mkdirs();" + NL + "                    }" + NL + "                    ///" + NL + "                } else {" + NL + "                    java.io.File parent = f.getParentFile();" + NL + "                    if(parent != null && !parent.exists()) {" + NL + "                        parent.mkdirs();" + NL + "                    }" + NL + "                    f.createNewFile();" + NL + "                    java.io.BufferedOutputStream bos = new java.io.BufferedOutputStream(new java.io.FileOutputStream(f));" + NL + "                    byte[] buff = new byte[1024];" + NL + "                    int data = -1;" + NL + "                    while((data = is.read(buff)) != -1) {" + NL + "                        bos.write(buff, 0, data);" + NL + "                    }" + NL + "                    bos.close();                    " + NL + "                }" + NL + "                unzippedFiles.add(new UnzippedFile_";
  protected final String TEXT_14 = "(f.getName(), f.getAbsolutePath()));" + NL + "            }" + NL + "            //This function is used for Extract file from the path  " + NL + "            public String getEntryName(String fileEntry){  " + NL + "                if(fileEntry != null && !fileEntry.equals(\"\")){  " + NL + "                        for(int i=fileEntry.length()-1; i>0; i--){  " + NL + "                                if(fileEntry.charAt(i)=='/'|| fileEntry.charAt(i) == '\\\\'){  " + NL + "                                        fileEntry = fileEntry.substring(i+1, fileEntry.length());  " + NL + "                                        break;  " + NL + "                                }  " + NL + "                        }  " + NL + "                }  " + NL + "                return fileEntry;  " + NL + "            }" + NL + "        } " + NL + "       " + NL + "\t\tUtil_";
  protected final String TEXT_15 = " util_";
  protected final String TEXT_16 = " = new Util_";
  protected final String TEXT_17 = "();" + NL + "        " + NL + "        String zipFileURL_";
  protected final String TEXT_18 = " = ";
  protected final String TEXT_19 = ";" + NL + "        String tmpFileURL_";
  protected final String TEXT_20 = " = zipFileURL_";
  protected final String TEXT_21 = ".toLowerCase();" + NL + "        String outputPath_";
  protected final String TEXT_22 = " = ";
  protected final String TEXT_23 = ";";
  protected final String TEXT_24 = "        " + NL + "        java.io.File file_";
  protected final String TEXT_25 = " = new java.io.File(zipFileURL_";
  protected final String TEXT_26 = ");        " + NL + "        String name_";
  protected final String TEXT_27 = " = file_";
  protected final String TEXT_28 = ".getName();        " + NL + "\t\tint i_";
  protected final String TEXT_29 = " = 0;" + NL + "\t\tif (tmpFileURL_";
  protected final String TEXT_30 = ".endsWith(\".tar.gz\"))  {" + NL + "\t\t\ti_";
  protected final String TEXT_31 = " = name_";
  protected final String TEXT_32 = ".length()-7;" + NL + "   \t\t} else {           " + NL + "            i_";
  protected final String TEXT_33 = " = name_";
  protected final String TEXT_34 = ".lastIndexOf('.');        " + NL + "            i_";
  protected final String TEXT_35 = " = i_";
  protected final String TEXT_36 = "!=-1? i_";
  protected final String TEXT_37 = " : name_";
  protected final String TEXT_38 = ".length();        " + NL + "        }    " + NL + "        String root_";
  protected final String TEXT_39 = " = name_";
  protected final String TEXT_40 = ".substring(0, i_";
  protected final String TEXT_41 = ");   " + NL + "        new java.io.File(outputPath_";
  protected final String TEXT_42 = ", root_";
  protected final String TEXT_43 = ").mkdir();" + NL + "        outputPath_";
  protected final String TEXT_44 = " = outputPath_";
  protected final String TEXT_45 = " +\"/\" + root_";
  protected final String TEXT_46 = ";";
  protected final String TEXT_47 = NL + NL + "\tif (tmpFileURL_";
  protected final String TEXT_48 = ".endsWith(\".tar.gz\") || tmpFileURL_";
  protected final String TEXT_49 = ".endsWith(\".tgz\")){   " + NL + "\t\tif(";
  protected final String TEXT_50 = " && !org.talend.archive.IntegrityUtil.isGZIPValid(zipFileURL_";
  protected final String TEXT_51 = ")){" + NL + "\t\t\tthrow new RuntimeException (\"The file \" + zipFileURL_";
  protected final String TEXT_52 = " + \" is corrupted, process terminated...\" );" + NL + "\t\t}" + NL + "        org.apache.tools.tar.TarInputStream zip_";
  protected final String TEXT_53 = " = new org.apache.tools.tar.TarInputStream(new java.util.zip.GZIPInputStream(new java.io.FileInputStream(zipFileURL_";
  protected final String TEXT_54 = ")));        " + NL + "        org.apache.tools.tar.TarEntry entry_";
  protected final String TEXT_55 = " = null;" + NL + "        java.io.InputStream is_";
  protected final String TEXT_56 = " = null;" + NL + "        while ((entry_";
  protected final String TEXT_57 = " = zip_";
  protected final String TEXT_58 = ".getNextEntry()) != null) {" + NL + "            boolean isDirectory_";
  protected final String TEXT_59 = " = entry_";
  protected final String TEXT_60 = ".isDirectory();" + NL + "\t\t\tif (!isDirectory_";
  protected final String TEXT_61 = ") {" + NL + "                is_";
  protected final String TEXT_62 = " = zip_";
  protected final String TEXT_63 = ";" + NL + "\t\t\t}" + NL + "            String filename_";
  protected final String TEXT_64 = " =  entry_";
  protected final String TEXT_65 = ".getName();" + NL + "            util_";
  protected final String TEXT_66 = ".output(outputPath_";
  protected final String TEXT_67 = ", filename_";
  protected final String TEXT_68 = ", isDirectory_";
  protected final String TEXT_69 = ", is_";
  protected final String TEXT_70 = ");\t\t\t" + NL;
  protected final String TEXT_71 = "  " + NL + "            java.io.File f = new java.io.File(outputPath_";
  protected final String TEXT_72 = "+\"/\"+ filename_";
  protected final String TEXT_73 = ");  " + NL + "            f.setLastModified(entry_";
  protected final String TEXT_74 = ".getModTime().getTime());  ";
  protected final String TEXT_75 = "  " + NL + "            java.io.File unzippedFile = new java.io.File(outputPath_";
  protected final String TEXT_76 = " + util_";
  protected final String TEXT_77 = ".getEntryName(filename_";
  protected final String TEXT_78 = "));  " + NL + "            unzippedFile.setLastModified(entry_";
  protected final String TEXT_79 = ".getModTime().getTime());  ";
  protected final String TEXT_80 = " " + NL + "" + NL + "        }" + NL + "\t\tzip_";
  protected final String TEXT_81 = ".close();" + NL + "" + NL + "\t} else if (tmpFileURL_";
  protected final String TEXT_82 = ".endsWith(\".tar\")){ " + NL + "\t\tif(";
  protected final String TEXT_83 = " && !org.talend.archive.IntegrityUtil.isGZIPValid(zipFileURL_";
  protected final String TEXT_84 = ")){" + NL + "\t\t\tthrow new RuntimeException (\"The file \" + zipFileURL_";
  protected final String TEXT_85 = " + \" is corrupted, process terminated...\" );" + NL + "" + NL + "\t\t}" + NL + "        org.apache.tools.tar.TarInputStream zip_";
  protected final String TEXT_86 = " = new org.apache.tools.tar.TarInputStream(new java.io.FileInputStream(zipFileURL_";
  protected final String TEXT_87 = "));        " + NL + "        org.apache.tools.tar.TarEntry entry_";
  protected final String TEXT_88 = " = null;" + NL + "        java.io.InputStream is_";
  protected final String TEXT_89 = " = null;" + NL + "        while ((entry_";
  protected final String TEXT_90 = " = zip_";
  protected final String TEXT_91 = ".getNextEntry()) != null) {" + NL + "            boolean isDirectory_";
  protected final String TEXT_92 = " = entry_";
  protected final String TEXT_93 = ".isDirectory(); " + NL + "            if (!isDirectory_";
  protected final String TEXT_94 = ") {" + NL + "                is_";
  protected final String TEXT_95 = " = zip_";
  protected final String TEXT_96 = ";" + NL + "\t\t\t}" + NL + "            String filename_";
  protected final String TEXT_97 = " =  entry_";
  protected final String TEXT_98 = ".getName();" + NL + "            util_";
  protected final String TEXT_99 = ".output(outputPath_";
  protected final String TEXT_100 = ", filename_";
  protected final String TEXT_101 = ", isDirectory_";
  protected final String TEXT_102 = ", is_";
  protected final String TEXT_103 = ");            " + NL + "         ";
  protected final String TEXT_104 = "  " + NL + "                   java.io.File f = new java.io.File(outputPath_";
  protected final String TEXT_105 = "+\"/\"+ filename_";
  protected final String TEXT_106 = ");  " + NL + "                   f.setLastModified(entry_";
  protected final String TEXT_107 = ".getModTime().getTime());  ";
  protected final String TEXT_108 = "  " + NL + "                   java.io.File unzippedFile = new java.io.File(outputPath_";
  protected final String TEXT_109 = " + util_";
  protected final String TEXT_110 = ".getEntryName(filename_";
  protected final String TEXT_111 = "));  " + NL + "                   unzippedFile.setLastModified(entry_";
  protected final String TEXT_112 = ".getModTime().getTime());  ";
  protected final String TEXT_113 = " " + NL + "" + NL + "        }" + NL + "\t\tzip_";
  protected final String TEXT_114 = ".close();" + NL + "  \t}else if (tmpFileURL_";
  protected final String TEXT_115 = ".endsWith(\".gz\")){ " + NL + "  \t\tif(";
  protected final String TEXT_116 = " && !org.talend.archive.IntegrityUtil.isGZIPValid(zipFileURL_";
  protected final String TEXT_117 = ")){" + NL + "\t\t\tthrow new RuntimeException (\"The file \" + zipFileURL_";
  protected final String TEXT_118 = " + \" is corrupted, process terminated...\" );" + NL + "" + NL + "\t\t}" + NL + "        java.util.zip.GZIPInputStream zip_";
  protected final String TEXT_119 = " = new java.util.zip.GZIPInputStream(new java.io.FileInputStream(new java.io.File(zipFileURL_";
  protected final String TEXT_120 = ")));" + NL + "        java.io.InputStream is_";
  protected final String TEXT_121 = " = zip_";
  protected final String TEXT_122 = ";" + NL + "        String fullName_";
  protected final String TEXT_123 = " = new java.io.File(zipFileURL_";
  protected final String TEXT_124 = ").getName();  " + NL + "\t\tString filename_";
  protected final String TEXT_125 = " =  fullName_";
  protected final String TEXT_126 = ".substring(0, fullName_";
  protected final String TEXT_127 = ".length()-3);  " + NL + "\t\tutil_";
  protected final String TEXT_128 = ".output(outputPath_";
  protected final String TEXT_129 = ", filename_";
  protected final String TEXT_130 = ",is_";
  protected final String TEXT_131 = ");" + NL + "\t\tzip_";
  protected final String TEXT_132 = ".close();" + NL + "\t}else { " + NL + "\t\t//the others all use the ZIP to decompression" + NL + "\t\t";
  protected final String TEXT_133 = NL + "\t\t\tSystem.out.println(\"Processing archive \"+ zipFileURL_";
  protected final String TEXT_134 = " + \", please wait...\");" + NL + "\t\t\tSystem.out.println();" + NL + "\t\t\t if( !";
  protected final String TEXT_135 = ".equals(\"\") ){" + NL + "\t\t\t\t ";
  protected final String TEXT_136 = " " + NL + "\t\t\t\t \tjava.io.File file_";
  protected final String TEXT_137 = " = new java.io.File(zipFileURL_";
  protected final String TEXT_138 = ");" + NL + "\t\t\t\t ";
  protected final String TEXT_139 = NL + "\t\t\t\t if(";
  protected final String TEXT_140 = "){" + NL + "\t\t\t\t\t if(!org.talend.archive.IntegrityUtil.isEncryptedZipValid(file_";
  protected final String TEXT_141 = ", ";
  protected final String TEXT_142 = ")){" + NL + "\t\t\t\t\t\t throw new RuntimeException (\"The file \" + zipFileURL_";
  protected final String TEXT_143 = " + \" is corrupted, process terminated...\" );" + NL + "\t\t\t\t\t }" + NL + "\t\t\t\t }" + NL + "\t\t\t java.io.InputStream target_";
  protected final String TEXT_144 = " = new java.io.FileInputStream(zipFileURL_";
  protected final String TEXT_145 = "); " + NL + "\t\t\t target_";
  protected final String TEXT_146 = " = " + NL + "\t\t\t\t new javax.crypto.CipherInputStream(target_";
  protected final String TEXT_147 = ", " + NL + "\t\t\t\t\t\t org.talend.archive.IntegrityUtil.createCipher(javax.crypto.Cipher.DECRYPT_MODE, ";
  protected final String TEXT_148 = ")); " + NL + "\t\t\t " + NL + "\t\t\t org.apache.commons.compress.archivers.zip.ZipArchiveInputStream input_";
  protected final String TEXT_149 = " = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(new java.io.BufferedInputStream(target_";
  protected final String TEXT_150 = ")); " + NL + "\t\t     org.apache.commons.compress.archivers.zip.ZipArchiveEntry entry_";
  protected final String TEXT_151 = " ; " + NL + "\t\t     " + NL + "\t\t\t while ((entry_";
  protected final String TEXT_152 = " = input_";
  protected final String TEXT_153 = ".getNextZipEntry()) != null) { " + NL + "\t\t\t\t ";
  protected final String TEXT_154 = NL + "\t\t\t\t \t\tSystem.out.println(\"Source file  : \" + entry_";
  protected final String TEXT_155 = ".getName()); " + NL + "\t\t\t\t ";
  protected final String TEXT_156 = NL + "\t\t\t            boolean isDirectory_";
  protected final String TEXT_157 = " = entry_";
  protected final String TEXT_158 = ".isDirectory();" + NL + "\t\t\t            String filename_";
  protected final String TEXT_159 = " =  entry_";
  protected final String TEXT_160 = ".getName();" + NL + "\t\t\t           " + NL + "\t\t\t            util_";
  protected final String TEXT_161 = ".output(outputPath_";
  protected final String TEXT_162 = ", filename_";
  protected final String TEXT_163 = ", isDirectory_";
  protected final String TEXT_164 = ", input_";
  protected final String TEXT_165 = ");" + NL + "\t\t\t            ";
  protected final String TEXT_166 = "  " + NL + "\t\t                  java.io.File f = new java.io.File(outputPath_";
  protected final String TEXT_167 = "+\"/\"+ filename_";
  protected final String TEXT_168 = ");  " + NL + "\t\t                  f.setLastModified(entry_";
  protected final String TEXT_169 = ".getTime());  " + NL + "\t\t             ";
  protected final String TEXT_170 = "  " + NL + "\t\t                  java.io.File unzippedFile = new java.io.File(outputPath_";
  protected final String TEXT_171 = " + util_";
  protected final String TEXT_172 = ".getEntryName(filename_";
  protected final String TEXT_173 = "));  " + NL + "\t\t                  unzippedFile.setLastModified(entry_";
  protected final String TEXT_174 = ".getTime());  " + NL + "\t\t            ";
  protected final String TEXT_175 = NL + "\t\t\t }" + NL + "\t\t\t target_";
  protected final String TEXT_176 = ".close();" + NL + "\t\t\t System.out.println();" + NL + "\t\t\t System.out.println(\"Process finished\"); " + NL + "\t\t\t}" + NL + "\t\t\telse {" + NL + "\t\t\t\tThread.sleep(1000); // To make sure the System.out.println message come before" + NL + "\t\t\t\tthrow new RuntimeException (\"Please enter the password and try again..\" );" + NL + "\t\t\t}";
  protected final String TEXT_177 = NL + "    \t    System.out.println(\"Processing archive \" + zipFileURL_";
  protected final String TEXT_178 = " + \", please wait...\");" + NL + "    \t    System.out.println();" + NL + "    \t    " + NL + "\t\t\tif(";
  protected final String TEXT_179 = " && !org.talend.archive.IntegrityUtil.isZipValid(new java.io.File(zipFileURL_";
  protected final String TEXT_180 = "))){" + NL + "\t\t\t\tThread.sleep(1000);  // To make the process terminated after the System.out.println" + NL + "\t\t\t\tthrow new RuntimeException (\"The file \" + zipFileURL_";
  protected final String TEXT_181 = " + \" is corrupted, process terminated...\" );" + NL + "\t\t\t}" + NL + "\t\t\tThread.sleep(1000);" + NL + "\t\t\t//java.util.zip.ZipFile zipFile_";
  protected final String TEXT_182 = " = new java.util.zip.ZipFile(zipFileURL_";
  protected final String TEXT_183 = "); " + NL + "" + NL + "\t\t\t";
  protected final String TEXT_184 = " " + NL + "\t\t\t//java.io.File file_";
  protected final String TEXT_185 = " = new java.io.File(zipFileURL_";
  protected final String TEXT_186 = "); " + NL + "\t\t\t";
  protected final String TEXT_187 = NL + "\t\t\t//java.io.FileInputStream fileStream_";
  protected final String TEXT_188 = " = new java.io.FileInputStream(file_";
  protected final String TEXT_189 = ");" + NL + "\t\t\t//java.io.BufferedInputStream bufferedStream_";
  protected final String TEXT_190 = " = new java.io.BufferedInputStream(fileStream_";
  protected final String TEXT_191 = ");" + NL + "\t\t\t" + NL + "\t \t\torg.apache.commons.compress.archivers.zip.ZipFile zip_";
  protected final String TEXT_192 = " = new org.apache.commons.compress.archivers.zip.ZipFile(zipFileURL_";
  protected final String TEXT_193 = ");" + NL + "\t \t\t//java.util.zip.ZipInputStream zipInputStream_";
  protected final String TEXT_194 = " = new java.util.zip.ZipInputStream(bufferedStream_";
  protected final String TEXT_195 = ");" + NL + "\t \t\t//java.util.zip.ZipEntry entry_";
  protected final String TEXT_196 = " ; " + NL + "\t           java.util.Enumeration enuFiles_";
  protected final String TEXT_197 = " = zip_";
  protected final String TEXT_198 = ".getEntries();" + NL + "\t        java.io.InputStream is_";
  protected final String TEXT_199 = " = null;" + NL + "\t        \t" + NL + "\t        " + NL + "\t         while (enuFiles_";
  protected final String TEXT_200 = ".hasMoreElements()) {" + NL + "\t       // while ((entry_";
  protected final String TEXT_201 = " = zipInputStream_";
  protected final String TEXT_202 = ".getNextEntry()) != null) {  " + NL + "\t            org.apache.commons.compress.archivers.zip.ZipArchiveEntry entry_";
  protected final String TEXT_203 = " = (org.apache.commons.compress.archivers.zip.ZipArchiveEntry) enuFiles_";
  protected final String TEXT_204 = ".nextElement();" + NL + "\t        \t";
  protected final String TEXT_205 = NL + "\t        \tSystem.out.println(\"Source file  : \" + entry_";
  protected final String TEXT_206 = ".getName()); " + NL + "\t        \t";
  protected final String TEXT_207 = NL + "\t            boolean isDirectory_";
  protected final String TEXT_208 = " = entry_";
  protected final String TEXT_209 = ".isDirectory();" + NL + "\t            if (!isDirectory_";
  protected final String TEXT_210 = " ) {" + NL + "\t                //get the input stream" + NL + "\t                is_";
  protected final String TEXT_211 = " = zip_";
  protected final String TEXT_212 = ".getInputStream(entry_";
  protected final String TEXT_213 = ");" + NL + "\t\t\t\t}" + NL + "\t            String filename_";
  protected final String TEXT_214 = " =  entry_";
  protected final String TEXT_215 = ".getName();" + NL + "\t            " + NL + "\t          //  util_";
  protected final String TEXT_216 = ".output(outputPath_";
  protected final String TEXT_217 = ", filename_";
  protected final String TEXT_218 = ", isDirectory_";
  protected final String TEXT_219 = ", zipInputStream_";
  protected final String TEXT_220 = ");" + NL + "\t            util_";
  protected final String TEXT_221 = ".output(outputPath_";
  protected final String TEXT_222 = ", filename_";
  protected final String TEXT_223 = ", isDirectory_";
  protected final String TEXT_224 = ", is_";
  protected final String TEXT_225 = ");" + NL + "\t            " + NL + "\t           ";
  protected final String TEXT_226 = "  " + NL + "\t                  java.io.File f = new java.io.File(outputPath_";
  protected final String TEXT_227 = "+\"/\"+ filename_";
  protected final String TEXT_228 = ");  " + NL + "\t                  f.setLastModified(entry_";
  protected final String TEXT_229 = ".getTime());  " + NL + "\t             ";
  protected final String TEXT_230 = "  " + NL + "\t                  java.io.File unzippedFile = new java.io.File(outputPath_";
  protected final String TEXT_231 = " + util_";
  protected final String TEXT_232 = ".getEntryName(filename_";
  protected final String TEXT_233 = "));  " + NL + "\t                  unzippedFile.setLastModified(entry_";
  protected final String TEXT_234 = ".getTime());  " + NL + "\t            ";
  protected final String TEXT_235 = " " + NL + "" + NL + "\t        }" + NL + "\t        // bufferedStream_";
  protected final String TEXT_236 = ".close();" + NL + "\t         zip_";
  protected final String TEXT_237 = ".close();" + NL + "\t         System.out.println();" + NL + "\t\t\t System.out.println(\"Process finished\"); " + NL + "\t\t\t " + NL + "\t\t";
  protected final String TEXT_238 = NL + "\t}" + NL + "\t" + NL + "" + NL + "\tfor (UnzippedFile_";
  protected final String TEXT_239 = " uf";
  protected final String TEXT_240 = " : util_";
  protected final String TEXT_241 = ".unzippedFiles) {" + NL + "\t\tglobalMap.put(\"";
  protected final String TEXT_242 = "_CURRENT_FILE\", uf";
  protected final String TEXT_243 = ".fileName);" + NL + "\t\tglobalMap.put(\"";
  protected final String TEXT_244 = "_CURRENT_FILEPATH\", uf";
  protected final String TEXT_245 = ".filePath);" + NL + "\t";
  protected final String TEXT_246 = NL;

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
    
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	String cid = node.getUniqueName();	

	String directory = ElementParameterParser.getValue(node, "__DIRECTORY__");
	String zipFile = ElementParameterParser.getValue(node, "__ZIPFILE__");
	boolean rootName = ("true").equals(ElementParameterParser.getValue(node, "__ROOTNAME__"));
	boolean extractPath = ("true").equals(ElementParameterParser.getValue(node, "__EXTRACTPATH__"));
	
	boolean isArchiveValid = ("true").equals(ElementParameterParser.getValue(node, "__INTEGRITY__"));
	boolean isPasswordNeeded = ("true").equals(ElementParameterParser.getValue(node, "__CHECKPASSWORD__"));
	boolean needPrintout = ("true").equals(ElementParameterParser.getValue(node, "__PRINTOUT__"));
	String password = ElementParameterParser.getValue(node, "__PASSWORD__");
	

    stringBuffer.append(TEXT_1);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_2);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_3);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_4);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_5);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_6);
    
                //deal with the path issue and get the outputstream
                if (extractPath==true) {
                    
    stringBuffer.append(TEXT_7);
    
                }else{
                    
    stringBuffer.append(TEXT_8);
    
                }
                
    stringBuffer.append(TEXT_9);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_10);
    
                //deal with the path issue and get the outputstream
                if (extractPath == true) {
                    
    stringBuffer.append(TEXT_11);
    
                }else{
                    
    stringBuffer.append(TEXT_12);
    
                }
                
    stringBuffer.append(TEXT_13);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_14);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_15);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_16);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_17);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_18);
    stringBuffer.append(zipFile );
    stringBuffer.append(TEXT_19);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_20);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_21);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_22);
    stringBuffer.append(directory );
    stringBuffer.append(TEXT_23);
    
	if (rootName==true) {

    stringBuffer.append(TEXT_24);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_25);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_26);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_27);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_28);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_29);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_30);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_31);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_32);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_33);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_34);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_35);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_36);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_37);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_38);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_39);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_40);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_41);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_42);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_43);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_44);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_45);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_46);
    
  }

    stringBuffer.append(TEXT_47);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_48);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_49);
    stringBuffer.append(isArchiveValid);
    stringBuffer.append(TEXT_50);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_51);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_52);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_53);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_54);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_55);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_56);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_57);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_58);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_59);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_60);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_61);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_62);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_63);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_64);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_65);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_66);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_67);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_68);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_69);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_70);
     if (extractPath == true) {
    stringBuffer.append(TEXT_71);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_72);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_73);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_74);
    } else {
    stringBuffer.append(TEXT_75);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_76);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_77);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_78);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_79);
     }
    stringBuffer.append(TEXT_80);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_81);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_82);
    stringBuffer.append(isArchiveValid);
    stringBuffer.append(TEXT_83);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_84);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_85);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_86);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_87);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_88);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_89);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_90);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_91);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_92);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_93);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_94);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_95);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_96);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_97);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_98);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_99);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_100);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_101);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_102);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_103);
     if (extractPath == true) {
    stringBuffer.append(TEXT_104);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_105);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_106);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_107);
    } else {
    stringBuffer.append(TEXT_108);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_109);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_110);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_111);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_112);
     }
    stringBuffer.append(TEXT_113);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_114);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_115);
    stringBuffer.append(isArchiveValid);
    stringBuffer.append(TEXT_116);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_117);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_118);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_119);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_120);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_121);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_122);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_123);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_124);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_125);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_126);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_127);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_128);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_129);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_130);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_131);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_132);
    if(isPasswordNeeded ){ 
    stringBuffer.append(TEXT_133);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_134);
    stringBuffer.append(password);
    stringBuffer.append(TEXT_135);
    if (rootName!=true) {
    stringBuffer.append(TEXT_136);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_137);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_138);
    }
    stringBuffer.append(TEXT_139);
    stringBuffer.append(isArchiveValid);
    stringBuffer.append(TEXT_140);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_141);
    stringBuffer.append(password);
    stringBuffer.append(TEXT_142);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_143);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_144);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_145);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_146);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_147);
    stringBuffer.append(password);
    stringBuffer.append(TEXT_148);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_149);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_150);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_151);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_152);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_153);
     if(needPrintout) {
    stringBuffer.append(TEXT_154);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_155);
    }
    stringBuffer.append(TEXT_156);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_157);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_158);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_159);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_160);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_161);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_162);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_163);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_164);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_165);
     if (extractPath == true) {
    stringBuffer.append(TEXT_166);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_167);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_168);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_169);
    } else {
    stringBuffer.append(TEXT_170);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_171);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_172);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_173);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_174);
     }
    stringBuffer.append(TEXT_175);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_176);
      }
		else {
    stringBuffer.append(TEXT_177);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_178);
    stringBuffer.append(isArchiveValid);
    stringBuffer.append(TEXT_179);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_180);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_181);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_182);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_183);
    if (rootName!=true) {
    stringBuffer.append(TEXT_184);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_185);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_186);
    }
    stringBuffer.append(TEXT_187);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_188);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_189);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_190);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_191);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_192);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_193);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_194);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_195);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_196);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_197);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_198);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_199);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_200);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_201);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_202);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_203);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_204);
     if(needPrintout) {
    stringBuffer.append(TEXT_205);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_206);
    }
    stringBuffer.append(TEXT_207);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_208);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_209);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_210);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_211);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_212);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_213);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_214);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_215);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_216);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_217);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_218);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_219);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_220);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_221);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_222);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_223);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_224);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_225);
     if (extractPath == true) {
    stringBuffer.append(TEXT_226);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_227);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_228);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_229);
    } else {
    stringBuffer.append(TEXT_230);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_231);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_232);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_233);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_234);
     }
    stringBuffer.append(TEXT_235);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_236);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_237);
    } 
    stringBuffer.append(TEXT_238);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_239);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_240);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_241);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_242);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_243);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_244);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_245);
    stringBuffer.append(TEXT_246);
    return stringBuffer.toString();
  }
}
